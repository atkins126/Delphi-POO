unit Model.Interfaces.Conexao.Query;

interface

uses
  data.db,
  Model.Interfaces.Conexao,
  FireDAC.Stan.Intf,
  FireDAC.Stan.Option,
  FireDAC.Stan.Error,
  FireDAC.UI.Intf,
  FireDAC.Phys.Intf,
  FireDAC.Stan.Def,
  FireDAC.Stan.Pool,
  FireDAC.Stan.Async,
  FireDAC.Phys,
  FireDAC.Stan.Param,
  FireDAC.DatS,
  FireDAC.DApt.Intf,
  FireDAC.DApt,
  FireDAC.Phys.MySQLDef,
  FireDAC.VCLUI.Wait,
  FireDAC.Comp.UI,
  FireDAC.Phys.MySQL,
  FireDAC.Comp.DataSet,
  FireDAC.Comp.Client;

 type
   TModelQuery = class(TInterfacedObject,iQuery)
     private
       FConexao : iConexao;
       FQuery : TFDQuery;
     public
      constructor Create(Parent : iConexao);
      destructor destroy; override;
      class function New(Parent : iConexao) : iQuery;
      function Query : TCustomConnection;
   end;

implementation

{ TModelQuery }


{ TModelQuery }

constructor TModelQuery.Create(Parent: iConexao);
begin
  FConexao := Parent;
  FQuery := TFDQuery.Create(nil);
end;

destructor TModelQuery.destroy;
begin

  inherited;
end;

class function TModelQuery.New(Parent: iConexao): iQuery;
begin
  result := Self.Create(Parent);
end;

function TModelQuery.Query: TCustomConnection;
begin

end;

end.
